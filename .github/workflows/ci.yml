name: CI

on:
  pull_request:
    branches: 
      - '**'

jobs:

  micro_ros_build:
    runs-on: ubuntu-latest
    container: ros:${{github.base_ref}}

    steps:
      - uses: actions/checkout@v2
        with:
          path: src/micro_ros_setup

      - name: Dependencies
        run: |
          apt update
          apt install -y python3-colcon-metadata python3-pip
          rosdep update
          rosdep install -y --from-paths src --ignore-src -y

      - name: Build
        run: |
          . /opt/ros/$ROS_DISTRO/setup.sh
          colcon build

      - name: Install micro-ROS build system
        run: |
            (test -f install/micro_ros_setup/lib/micro_ros_setup/build_firmware.sh) && true || false

      - uses: actions/upload-artifact@v1
        with:
          name: micro_ros_build
          path: install

  micro_ros_client:
    runs-on: ubuntu-latest
    container: ros:${{github.base_ref}}
    needs: micro_ros_build

    strategy:
      fail-fast: false
      matrix:
        include:
          - rtos: host-zenoh-pico
            platform: null
            configuration: null
            transport_arguments: null
            binary: 'install/micro_ros_demos_rclc/lib/micro_ros_demos_rclc/int32_publisher/int32_publisher'

    steps:
      - uses: actions/checkout@v2
        with:
          path: src/micro_ros_setup

      - name: Dependencies
        run: |
          apt update
          apt install -y python3-colcon-metadata python3-pip
          rosdep update
          rosdep install -y --from-paths src --ignore-src -y

      - uses: actions/download-artifact@v1
        with:
          name: micro_ros_build
          path: install

      # Workaround https://github.com/actions/upload-artifact/issues/38
      - run: |
          chmod +x -R install

      - name: Configure and build micro-ROS
        run: |
          . /opt/ros/foxy/setup.sh
          . install/local_setup.sh
          ros2 run micro_ros_setup create_firmware_ws.sh ${{ matrix.rtos }} ${{ matrix.platform }}
          ros2 run micro_ros_setup configure_firmware.sh ${{ matrix.configuration }} ${{ matrix.transport_arguments }} 
          ros2 run micro_ros_setup build_firmware.sh

      - name: Check binaries
        run: |
          (test -f ${{ matrix.binary }}) && true || false
